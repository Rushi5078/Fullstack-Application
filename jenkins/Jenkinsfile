pipeline {
  agent any

  environment {
    NODE_IMAGE = 'node:20-alpine'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build Frontend') {
      agent {
        docker { image "${env.NODE_IMAGE}" args '-u root:root' }
      }
      steps {
        dir('frontend') {
          sh 'npm ci'
          sh 'npm run build'
          sh 'rm -rf ../frontend_build || true && cp -r build ../frontend_build'
        }
      }
    }

    stage('Deploy Frontend') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
          sh '''
            # sync built files to remote tmp, then move into nginx dir and reload
            rsync -avz -e "ssh -i $SSH_KEY -o StrictHostKeyChecking=no" frontend_build/ ${SSH_USER}@${FRONTEND_HOST}:/tmp/frontend_build/
            ssh -i $SSH_KEY -o StrictHostKeyChecking=no ${SSH_USER}@${FRONTEND_HOST} bash -lc "
              sudo rm -rf /usr/share/nginx/html/* || true
              sudo mv /tmp/frontend_build/* /usr/share/nginx/html/ || true
              # adjust owner if your nginx user is different (nginx or www-data)
              sudo chown -R nginx:nginx /usr/share/nginx/html || true
              sudo nginx -t && sudo systemctl reload nginx || sudo systemctl restart nginx || true
            "
          '''
        }
      }
    }
  }

  post {
    success { echo "Frontend deployed to ${FRONTEND_HOST}" }
    failure { echo "Frontend deploy failed â€” check console output" }
  }
}
